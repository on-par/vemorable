{
  "root": true,
  "env": {
    "browser": true,
    "es2022": true,
    "node": true
  },
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 2022,
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true
    },
    "project": "./tsconfig.json"
  },
  "plugins": [
    "@typescript-eslint",
    "security",
    "react-hooks"
  ],
  "extends": [
    "eslint:recommended",
    "@typescript-eslint/recommended",
    "@typescript-eslint/recommended-requiring-type-checking",
    "plugin:security/recommended",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
    "plugin:@next/next/recommended",
    "next/core-web-vitals"
  ],
  "settings": {
    "react": {
      "version": "detect"
    }
  },
  "ignorePatterns": [
    "node_modules/**",
    ".next/**",
    "out/**",
    "build/**",
    "next-env.d.ts",
    "**/*.test.ts",
    "**/*.test.tsx",
    "e2e/**",
    "playwright.config.ts",
    "vitest.config.ts"
  ],
  "rules": {
    // Security Rules
    "security/detect-object-injection": "error",
    "security/detect-unsafe-regex": "error",
    "security/detect-buffer-noassert": "error",
    "security/detect-child-process": "warn",
    "security/detect-disable-mustache-escape": "error",
    "security/detect-eval-with-expression": "error",
    "security/detect-no-csrf-before-method-override": "error",
    "security/detect-non-literal-fs-filename": "warn",
    "security/detect-non-literal-regexp": "warn",
    "security/detect-non-literal-require": "error",
    "security/detect-possible-timing-attacks": "warn",
    "security/detect-pseudoRandomBytes": "error",
    "security/detect-bidi-characters": "error",

    // TypeScript Security & Quality Rules
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/no-unused-vars": "error",
    "@typescript-eslint/explicit-function-return-type": "warn",
    "@typescript-eslint/no-non-null-assertion": "error",
    "@typescript-eslint/prefer-nullish-coalescing": "error",
    "@typescript-eslint/prefer-optional-chain": "error",
    "@typescript-eslint/no-floating-promises": "error",
    "@typescript-eslint/await-thenable": "error",
    "@typescript-eslint/no-misused-promises": "error",
    "@typescript-eslint/require-await": "error",
    "@typescript-eslint/no-unnecessary-type-assertion": "error",
    "@typescript-eslint/strict-boolean-expressions": "error",

    // Code Quality & Clean Code (per CLAUDE.md)
    "no-console": "warn",
    "no-debugger": "error",
    "no-alert": "error",
    "no-eval": "error",
    "no-implied-eval": "error",
    "no-new-func": "error",
    "no-script-url": "error",
    "prefer-const": "error",
    "no-var": "error",
    "eqeqeq": ["error", "always"],
    "curly": ["error", "all"],
    "complexity": ["warn", { "max": 10 }],
    "max-depth": ["warn", 4],
    "max-lines-per-function": ["warn", { "max": 50 }],

    // React Security & Best Practices
    "react/no-danger": "error",
    "react/no-danger-with-children": "error",
    "react/jsx-no-script-url": "error",
    "react/jsx-no-target-blank": ["error", { "allowReferrer": false }],
    "react/no-unknown-property": "error",
    "react/prop-types": "off", // Using TypeScript instead
    "react/react-in-jsx-scope": "off", // Next.js doesn't require this

    // Prevent hardcoded secrets/credentials
    "no-template-curly-in-string": "error",

    // Additional security patterns
    "no-restricted-globals": [
      "error",
      {
        "name": "event",
        "message": "Use local parameter instead."
      }
    ],
    "no-restricted-syntax": [
      "error",
      {
        "selector": "CallExpression[callee.name='eval']",
        "message": "eval() is not allowed for security reasons."
      },
      {
        "selector": "CallExpression[callee.object.name='window'][callee.property.name='eval']",
        "message": "window.eval() is not allowed for security reasons."
      },
      {
        "selector": "NewExpression[callee.name='Function']",
        "message": "Function constructor is not allowed for security reasons."
      }
    ],

    // Prevent common XSS patterns
    "no-inner-declarations": "error",
    "no-new-wrappers": "error",
    "radix": "error",

    // Clean code practices (SOLID principles from CLAUDE.md)
    "prefer-arrow-callback": "error",
    "arrow-spacing": "error",
    "no-duplicate-imports": "error",
    "sort-imports": [
      "error",
      {
        "ignoreCase": true,
        "ignoreDeclarationSort": true,
        "memberSyntaxSortOrder": ["none", "all", "multiple", "single"]
      }
    ]
  },
  "overrides": [
    {
      "files": ["*.js", "*.jsx"],
      "rules": {
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/no-var-requires": "off"
      }
    },
    {
      "files": ["*.test.ts", "*.test.tsx", "**/__tests__/**/*", "**/*.spec.ts", "**/*.spec.tsx"],
      "env": {
        "jest": true,
        "vitest-globals/env": true
      },
      "rules": {
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/no-unsafe-function-type": "off",
        "max-lines-per-function": "off",
        "complexity": "off"
      }
    },
    {
      "files": ["next.config.js", "*.config.js", "*.config.mjs"],
      "rules": {
        "@typescript-eslint/no-var-requires": "off",
        "no-console": "off"
      }
    }
  ]
}