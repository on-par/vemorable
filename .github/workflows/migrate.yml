name: Database Migrations & Verification

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      skip_migrations:
        description: 'Skip database migrations'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'

jobs:
  verify:
    name: Verify Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Type check
        run: npx tsc --noEmit
      
      - name: Lint code
        run: npm run lint
      
      - name: Run unit tests with coverage
        env:
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: npm run test:coverage
      
      - name: Build verification
        env:
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NEXT_PUBLIC_APP_URL: https://vemorable.vercel.app
        run: npm run build

  migrate:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: verify
    if: github.event.inputs.skip_migrations != 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Verify database connection
        run: |
          echo "Verifying database connection..."
          # We'll use the DATABASE_URL directly with db push
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
      
      - name: Validate migrations exist
        run: |
          if [ -z "$(ls -A supabase/migrations/ 2>/dev/null)" ]; then
            echo "No migrations found, skipping migration deployment"
            echo "SKIP_MIGRATIONS=true" >> $GITHUB_ENV
          else
            echo "Migrations found, proceeding with deployment"
            echo "SKIP_MIGRATIONS=false" >> $GITHUB_ENV
          fi
      
      - name: Check current migration status
        if: env.SKIP_MIGRATIONS == 'false'
        id: migration_status
        run: |
          echo "Current migration status:"
          
          # Get list of applied migrations
          applied_migrations=$(supabase migration list --db-url "$DATABASE_URL" 2>&1 || echo "")
          echo "$applied_migrations"
          
          # Check if all migrations are already applied
          pending_count=0
          for migration_file in supabase/migrations/*.sql; do
            if [ -f "$migration_file" ]; then
              migration_name=$(basename "$migration_file")
              if ! echo "$applied_migrations" | grep -q "$migration_name"; then
                echo "Pending migration found: $migration_name"
                pending_count=$((pending_count + 1))
              fi
            fi
          done
          
          if [ $pending_count -eq 0 ]; then
            echo "All migrations are already applied. Skipping migration step."
            echo "HAS_PENDING_MIGRATIONS=false" >> $GITHUB_ENV
          else
            echo "Found $pending_count pending migrations to apply."
            echo "HAS_PENDING_MIGRATIONS=true" >> $GITHUB_ENV
          fi
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      
      - name: Run pending migrations
        if: env.SKIP_MIGRATIONS == 'false' && env.HAS_PENDING_MIGRATIONS == 'true'
        run: |
          echo "Applying pending migrations..."
          
          # Try to apply migrations with better error handling
          if ! supabase db push --db-url "$DATABASE_URL" 2>&1; then
            echo "Migration push failed. Checking if it's due to already applied migrations..."
            
            # Get detailed status
            migration_output=$(supabase migration list --db-url "$DATABASE_URL" 2>&1)
            echo "Current database migration state:"
            echo "$migration_output"
            
            # Check if all local migrations exist in the database
            all_applied=true
            for migration_file in supabase/migrations/*.sql; do
              if [ -f "$migration_file" ]; then
                migration_name=$(basename "$migration_file")
                if ! echo "$migration_output" | grep -q "$migration_name"; then
                  all_applied=false
                  echo "ERROR: Migration $migration_name is not applied but push failed!"
                  exit 1
                fi
              fi
            done
            
            if [ "$all_applied" = true ]; then
              echo "All migrations are already applied to the database. This is expected."
              exit 0
            else
              echo "Migration push failed for unknown reasons."
              exit 1
            fi
          else
            echo "Migrations applied successfully."
          fi
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      
      - name: Verify migration success
        if: env.SKIP_MIGRATIONS == 'false'
        run: |
          echo "Verifying migrations were applied..."
          supabase migration list --db-url "$DATABASE_URL"
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

  smoke-tests:
    name: Post-deployment Verification
    runs-on: ubuntu-latest
    needs: [verify, migrate]
    if: always() && needs.verify.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Wait for deployment
        run: |
          echo "Waiting for Vercel deployment to be ready..."
          sleep 45
      
      - name: Health check
        run: |
          deployment_url="https://vemorable.vercel.app"
          echo "Testing deployment at: $deployment_url"
          
          # Test homepage
          response=$(curl -s -o /dev/null -w "%{http_code}" "$deployment_url")
          if [ $response -eq 200 ]; then
            echo "✅ Homepage is accessible"
          else
            echo "❌ Homepage returned status: $response"
            exit 1
          fi
          
          # Test API health
          api_response=$(curl -s -o /dev/null -w "%{http_code}" "$deployment_url/api/health" || echo "404")
          echo "API health check status: $api_response"
      
      - name: Check critical pages
        run: |
          deployment_url="https://vemorable.vercel.app"
          
          # List of critical routes to check
          routes=("/sign-in" "/sign-up" "/dashboard")
          
          for route in "${routes[@]}"; do
            response=$(curl -s -o /dev/null -w "%{http_code}" "$deployment_url$route")
            if [ $response -eq 200 ] || [ $response -eq 307 ] || [ $response -eq 308 ]; then
              echo "✅ Route $route is accessible (status: $response)"
            else
              echo "⚠️ Route $route returned status: $response"
            fi
          done
      
      - name: Create deployment comment
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `✅ Production deployment verified successfully at https://vemorable.vercel.app`
            });