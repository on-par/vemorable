name: Main Branch Checks & Migrations

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      skip_migrations:
        description: 'Skip database migrations'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'

jobs:
  verify:
    name: Verify Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Type check
        run: npx tsc --noEmit
      
      - name: Lint code
        run: npm run lint
      
      - name: Run unit tests
        env:
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: npm test -- --ci --coverage --maxWorkers=2
      
      - name: Build verification
        env:
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NEXT_PUBLIC_APP_URL: https://vemorable.vercel.app
        run: npm run build

  migrate:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: verify
    if: github.event.inputs.skip_migrations != 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Link to Supabase project
        run: |
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_ID }} \
            --password ${{ secrets.SUPABASE_DB_PASSWORD }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      
      - name: Check migration status
        run: |
          echo "Current migration status:"
          supabase migration list
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        continue-on-error: true
      
      - name: Run pending migrations
        run: |
          echo "Applying migrations..."
          supabase db push --password ${{ secrets.SUPABASE_DB_PASSWORD }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      
      - name: Verify migration success
        run: |
          echo "Verifying migrations were applied..."
          supabase migration list
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [verify, migrate]
    if: always() && needs.verify.result == 'success' && (needs.migrate.result == 'success' || needs.migrate.result == 'skipped')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright
        run: npx playwright install --with-deps chromium
      
      - name: Wait for Vercel deployment
        id: wait-for-vercel
        run: |
          echo "Waiting for Vercel deployment to complete..."
          sleep 60
          # In a real scenario, you might want to poll Vercel API or use deployment_status event
      
      - name: Get deployment URL
        id: get-url
        run: |
          # For production deployments, use the production URL
          echo "deployment-url=https://vemorable.vercel.app" >> $GITHUB_OUTPUT
      
      - name: Run E2E tests
        env:
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          DEPLOYMENT_URL: ${{ steps.get-url.outputs.deployment-url }}
        run: |
          if [ -f "playwright.config.ts" ]; then
            echo "Running Playwright E2E tests against $DEPLOYMENT_URL"
            npx playwright test
          else
            echo "No Playwright tests found, skipping E2E tests"
          fi
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  smoke-tests:
    name: Post-deployment Verification
    runs-on: ubuntu-latest
    needs: [verify, migrate]
    if: always() && needs.verify.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Wait for deployment
        run: |
          echo "Waiting for Vercel deployment to be ready..."
          sleep 45
      
      - name: Health check
        run: |
          deployment_url="https://vemorable.vercel.app"
          echo "Testing deployment at: $deployment_url"
          
          # Test homepage
          response=$(curl -s -o /dev/null -w "%{http_code}" "$deployment_url")
          if [ $response -eq 200 ]; then
            echo "✅ Homepage is accessible"
          else
            echo "❌ Homepage returned status: $response"
            exit 1
          fi
          
          # Test API health
          api_response=$(curl -s -o /dev/null -w "%{http_code}" "$deployment_url/api/health" || echo "404")
          echo "API health check status: $api_response"
      
      - name: Check critical pages
        run: |
          deployment_url="https://vemorable.vercel.app"
          
          # List of critical routes to check
          routes=("/sign-in" "/sign-up" "/dashboard")
          
          for route in "${routes[@]}"; do
            response=$(curl -s -o /dev/null -w "%{http_code}" "$deployment_url$route")
            if [ $response -eq 200 ] || [ $response -eq 307 ] || [ $response -eq 308 ]; then
              echo "✅ Route $route is accessible (status: $response)"
            else
              echo "⚠️ Route $route returned status: $response"
            fi
          done
      
      - name: Create deployment comment
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `✅ Production deployment verified successfully at https://vemorable.vercel.app`
            });